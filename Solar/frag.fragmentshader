#version 330 core
out vec4 FragColor;

in vec3 FragPos;
in vec3 Normal;
in vec2 TexCoords;

uniform sampler2D texture1;

struct Light {
    vec3 position;
    vec3 diffuse;
    vec3 ambient;
};

uniform Light light;

uniform samplerCube depthMap;

float ShadowCalculation(vec3 fragPos)
{
    float far_plane = 25.0f;
    // get vector between fragment position and light position
    vec3 fragToLight = fragPos;
    // ise the fragment to light vector to sample from the depth map    
    float closestDepth = texture(depthMap, fragToLight).r;
    // it is currently in linear range between [0,1], let's re-transform it back to original depth value
    closestDepth *= far_plane;
    // now get current linear depth as the length between the fragment and light position
    float currentDepth = length(fragToLight);
    // test for shadows
    float bias = 0.05; // we use a much larger bias since depth is now in [near_plane, far_plane] range
    float shadow = currentDepth -  bias > closestDepth ? 1.0 : 0.0;        
    // display closestDepth as debug (to visualize depth cubemap)
    //FragColor = vec4(vec3(closestDepth/far_plane), 1.0);    
        
    return shadow;
}

void main(){
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(light.position - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = light.diffuse * diff * texture(texture1, TexCoords).rgb;  
    vec3 ambient = light.ambient * texture(texture1, TexCoords).rgb;
    float shadow = ShadowCalculation(FragPos);
    FragColor = vec4((1.0 - shadow) * diffuse + ambient, 1.0f);
}